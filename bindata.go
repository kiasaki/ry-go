// Code generated by go-bindata.
// sources:
// lisp/runtime.syp
// DO NOT EDIT!

package ry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lispRuntimeSyp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x49\x39\xb0\x3e\x44\x72\x4a\x7a\x2a\x47\x1e\x81\x1b\xe2\xe0\xd6\xdb\x60\xc5\xb5\x83\xe3\xa8\xea\xdb\x63\x3b\x11\x44\xa2\xb7\xfd\x99\xfd\x46\xb3\xa4\xf9\x82\xef\xd9\xc4\xe6\xfc\xa5\x1c\xe8\xaa\x06\x2e\xa5\x10\x55\x95\x97\xae\x6c\xf1\xf1\x59\x01\x34\x45\x3f\x36\xac\x4d\xf4\x41\x94\x9e\x9d\xae\x37\xe7\xcf\x24\xf2\xdd\x7a\x98\x26\xda\x72\x33\xf0\x7d\x0c\x3c\x4d\x3c\xad\x14\xcb\x89\x37\x80\x5e\x6b\xd0\x02\xdb\x68\x56\xf3\x2c\x2c\x06\x89\xcc\xd6\xa2\xc5\x01\x03\x5a\x29\xd1\xb6\x52\x2c\xcb\x7f\xfc\x62\x7e\x3c\xe2\x8d\x4f\x73\xdf\x1b\xd7\x83\x9c\xc7\x4d\xdd\xe1\x97\x90\x31\xcf\x2e\x3e\xc0\xf9\x9b\xa8\xa8\xf7\xa0\x13\x27\x61\xc9\x62\x99\x47\x1c\xa4\x2c\x78\xca\xf2\x52\x8c\xc1\xb8\x68\x1d\x76\xef\xe6\xca\x7e\x8e\xf5\xae\xd8\xa4\x5f\xa8\x10\x7f\x9f\x41\x67\xcb\x2a\xac\x2d\xf6\x5d\x87\xfd\x4b\x97\xc6\x9b\x00\x1d\x9e\xf4\x5f\x82\xc5\xfd\x41\x84\xea\x27\x00\x00\xff\xff\x9b\x28\xf1\xcf\x93\x01\x00\x00")

func lispRuntimeSypBytes() ([]byte, error) {
	return bindataRead(
		_lispRuntimeSyp,
		"lisp/runtime.syp",
	)
}

func lispRuntimeSyp() (*asset, error) {
	bytes, err := lispRuntimeSypBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lisp/runtime.syp", size: 403, mode: os.FileMode(436), modTime: time.Unix(1433296523, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lisp/runtime.syp": lispRuntimeSyp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lisp": &bintree{nil, map[string]*bintree{
		"runtime.syp": &bintree{lispRuntimeSyp, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

